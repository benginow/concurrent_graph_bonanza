use std::fs;
use crate::simple::SimpleGraph;
use crate::graph::Graph;
use crate::coarse::CoarseCSRGraph;
use crate::graph::GraphErr;


#[bench]
fn test() {let val = g.add_node(0);
assert!(val.is_err());
let val = g.add_node(1);
assert!(val.is_err());
let val = g.add_node(2);
assert!(val.is_err());
let val = g.add_edge(1,1,0.3701070347964347);
assert!(val.is_ok());
let val = g.add_edge(1,1,0.09483174070783795);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_node(3);
assert!(val.is_err());
let val = g.add_node(4);
assert!(val.is_err());
let val = g.add_node(5);
assert!(val.is_err());
let val = g.add_edge(4,2,0.10257367114401961);
assert!(val.is_ok());
let val = g.add_edge(4,2,0.24845525772176003);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_node(6);
assert!(val.is_err());
let val = g.add_edge(3,2,0.6500498163233224);
assert!(val.is_ok());
let val = g.add_edge(3,2,0.27164870721493306);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_node(7);
assert!(val.is_err());
let val = g.add_node(8);
assert!(val.is_err());
let val = g.add_edge(0,4,0.4392818625327095);
assert!(val.is_ok());
let val = g.add_edge(0,4,0.5201839448241175);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(2,2,0.8756755061324423);
assert!(val.is_ok());
let val = g.add_edge(2,2,0.6758554512324021);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_node(9);
assert!(val.is_err());
let val = g.add_edge(8,2,0.6820620931360427);
assert!(val.is_ok());
let val = g.add_edge(8,2,0.3238091136768486);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(2,6,0.2810667179912387);
assert!(val.is_ok());
let val = g.add_edge(2,6,0.6713401577584817);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(3,7,0.25599066074407806);
assert!(val.is_ok());
let val = g.add_edge(3,7,0.31395192892189616);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(7,1,0.40626522119970143);
assert!(val.is_ok());
let val = g.add_edge(7,1,0.7142185456128028);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(5,4,0.9771501355033841);
assert!(val.is_ok());
let val = g.add_edge(5,4,0.24139647007997167);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(4,2,0.9523765027102448);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(4,2,0.9990846055748934);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(9,2,0.8349332099308945);
assert!(val.is_ok());
let val = g.add_edge(9,2,0.9659412406420957);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(0,8,0.9497463690785551);
assert!(val.is_ok());
let val = g.add_edge(0,8,0.9224898585012368);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(4,6,0.2006523298498949);
assert!(val.is_ok());
let val = g.add_edge(4,6,0.1426284888655167);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(3,9,0.6025257405142614);
assert!(val.is_ok());
let val = g.add_edge(3,9,0.042458575027160994);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(7,5,0.88531047334123);
assert!(val.is_ok());
let val = g.add_edge(7,5,0.4290944448478141);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(3,6,0.7103237552327212);
assert!(val.is_ok());
let val = g.add_edge(3,6,0.8390741243041017);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(7,0,0.4258082022777123);
assert!(val.is_ok());
let val = g.add_edge(7,0,0.8815916000745145);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(8,5,0.8715336215598544);
assert!(val.is_ok());
let val = g.add_edge(8,5,0.49892557140677507);
assert!(val == GraphErr::EdgeAlreadyExists);
let val = g.add_edge(9,8,0.663686154028925);
assert!(val.is_ok());
let val = g.add_edge(9,8,0.567284734973761);
assert!(val == GraphErr::EdgeAlreadyExists);
}
